name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'cookbook/docs/**'
  pull_request:
    paths-ignore:
      - 'cookbook/docs/**'
jobs:

  # Lists all directories that have Dockerfile in them...
  list:
    runs-on: ubuntu-latest
    name: "Create a list of packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-list
        run: echo "::set-output name=packages::$(find cookbook -mindepth 1 -maxdepth 5 -type f -name Dockerfile -exec dirname '{}' \; | sort | jq --raw-input . | jq --slurp . | jq -c .)"
    outputs:
      packages: "${{ steps.create-list.outputs.packages }}"

  trigger_serialize_register_workflow:
    name: Serialize & Register Flytesnacks workflow
    needs: [list]
    uses: flyteorg/flytesnacks/.github/workflows/serialize_workflow.yml@master
    with:
      packages: ${{ needs.list.outputs.packages }}
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}

  push_github:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: [list]
    strategy:
      matrix:
        directory: "${{ fromJson(needs.list.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: 'Set example name'
        id: example_id
        # add a step output `steps.build_id.outputs.id` as the unique id
        run: |
          echo "::set-output name=id::$(basename -- ${{ matrix.directory }})"
          temp=${{ matrix.directory }}
          echo "::set-output name=path::$(echo "./${temp%/*}")"
      - name: Build & Push Docker Image to Github Registry
        uses: whoan/docker-build-with-cache-action@v5
        with:
          # https://docs.github.com/en/packages/learn-github-packages/publishing-a-package
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
          image_name: ${{ github.repository_owner }}/flytecookbook
          image_tag: ${{ steps.example_id.outputs.id }}-latest,${{ steps.example_id.outputs.id }}-${{ github.sha }}
          registry: ghcr.io
          push_git_tag: ${{ github.event_name != 'pull_request' }}
          push_image_and_stages: ${{ github.event_name != 'pull_request' }}
          build_extra_args: "--compress=true --build-arg=tag=ghcr.io/${{ github.repository_owner }}/flytecookbook:${{ steps.example_id.outputs.id }}-${{ github.sha }}"
          context: ${{ steps.example_id.outputs.path }}
          dockerfile: ${{ steps.example_id.outputs.id }}/Dockerfile

  bump_version:
    name: Bump Version
    if: ${{ github.event_name != 'pull_request' }}
    needs: [ trigger_serialize_register_workflow, push_github ] # Only to ensure it can successfully build
    uses: flyteorg/flytetools/.github/workflows/bump_version.yml@master
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}

  prerelease:
    name: Create Prerelease
    needs: [bump_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Create Pre release
        id: prerelease
        run: |
          RELEASE_ID=$(curl --location -v -X POST 'https://api.github.com/repos/flyteorg/flytesnacks/releases' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: Bearer ${{ secrets.FLYTE_BOT_PAT }}' \
          --data-raw '{
              "tag_name": "'${{ needs.bump-version.outputs.version }}'",
              "prerelease": true
          }' | jq -r '.id')
          echo ::set-output name=release_id::$RELEASE_ID
    outputs:
      release_id: ${{ steps.prerelease.outputs.release_id }}

  # Download artifacts again and push them to the release only if this is not a pull request
  release_workflow:
    name: Publish artifacts to github release
    runs-on: ubuntu-latest
    needs: [ prerelease ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: setup download artifact dir
        run: |
          mkdir download-artifact
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./download-artifact/
      - name: Package Examples
        run: |
          mkdir -p cookbook/release-snacks
          cd download-artifact
          for i in */; do tar -czvf "../cookbook/release-snacks/${i%/}.tar.gz" "$i" & done; wait
          cd .. && sudo rm -rf download-artifact/
          cp cookbook/flyte_tests_manifest.json cookbook/release-snacks/flyte_tests_manifest.json
      - name: Release test manifest
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
          GORELEASER_CURRENT_TAG: ${{ needs.bump-version.outputs.version }}

  make_release:
    name: Mark github pre-release as Release
    needs: [ release_workflow ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Update Release
        id: release
        run: |
          curl --location -X -v POST 'https://api.github.com/repos/flyteorg/flytesnacks/releases/${{ needs.prerelease.outputs.release_id }}' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: Bearer ${{ secrets.FLYTE_BOT_PAT }}' \
          --data-raw '{
              "tag_name": "'${{ needs.bump-version.outputs.version }}'",
              "prerelease": false
          }'

  docs_warnings:
    name: Docs Warnings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - name: Report Sphinx Warnings
        id: sphinx-warnings
        run: |
          sudo apt-get install python3-sphinx
          cd cookbook
          pip install -r docs-requirements.txt
          cd docs && make html