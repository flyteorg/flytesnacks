name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # This is the build system for the new example directory structure
  list_examples:
    runs-on: ubuntu-latest
    name: "Create a list of example packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-example-list
        run: |
          echo "PACKAGES=$(find examples -maxdepth 1 -type d -exec basename '{}' \; \
          | grep -v -e 'testing' -e 'examples' \
          | grep -v -e 'airflow_plugin' -e 'forecasting_sales' -e 'onnx_plugin' \
          | sort \
          | jq --raw-input . \
          | jq --slurp . \
          | jq -c .)" >> "$GITHUB_OUTPUT"
    outputs:
      packages: "${{ steps.create-example-list.outputs.PACKAGES }}"
  serialize_examples:
    needs: [list_examples]
    runs-on: "ubuntu-latest"
    env:
      FLYTE_SDK_RICH_TRACEBACKS: "0"
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
    name: Serialize
    strategy:
      fail-fast: false
      matrix:
        example: "${{ fromJson(needs.list_examples.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements files
          key: ${{ format('{0}-pip-{1}', runner.os, hashFiles('dev-requirements.in', 'requirements.in')) }}
      - name: Install dependencies
        working-directory: examples/${{ matrix.example }}
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install flytekit flytekitplugins-envd
          if [ -f requirements.in ]; then uv pip install -r requirements.in; fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.FLYTE_BOT_USERNAME }}
          password: ${{ secrets.FLYTE_BOT_PAT }}
      - name: Pyflyte package
        working-directory: examples/${{ matrix.example }}
        run: |
          pip freeze
          source .venv/bin/activate
          pyflyte \
          --pkgs ${{ matrix.example }} package \
          --image mindmeld="ghcr.io/flyteorg/flytecookbook:core-latest" \
          --image borebuster="ghcr.io/flyteorg/flytekit:py3.9-latest" \
          --output spark-package.tgz \
          --force --fast
