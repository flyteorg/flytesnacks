name: Serialize, Register & Release Examples

on:
  pull_request:
    paths-ignore:
      - 'cookbook/docs/**'
      - 'cookbook/deployment/**'
  workflow_call:
    inputs:
      tag:
        description: "Github tag"
        required: false
        type: string
    secrets:
      FLYTE_BOT_PAT:
        required: true

defaults:
  run:
    # https://github.com/actions/runner/issues/241#issuecomment-577360161
    shell: 'script -q -e -c "bash {0}"'

jobs:
  # Lists all directories that have Dockerfile in them...
  list:
    runs-on: ubuntu-latest
    name: "Create a list of packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-list
        run: echo "::set-output name=packages::$(find cookbook -mindepth 1 -maxdepth 5 -type f -name Dockerfile -exec dirname '{}' \; | sort | jq --raw-input . | jq --slurp . | jq -c .)"
    outputs:
      packages: "${{ steps.create-list.outputs.packages }}"
  # Use matrix strategy to run serialize for all directories in parallel. This also uploads the examples as artifacts
  # for the workflow.

  # Use matrix strategy to run serialize for all directories in parallel. This also uploads the examples as artifacts
  # for the workflow.
  serialize:
    name: Serialize Example
    runs-on: ubuntu-latest
    needs: [ "list"]
    strategy:
      matrix:
        directory: "${{ fromJson(needs.list.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: 'Set example id'
        id: example_id
        # add a step output `steps.build_id.outputs.id` as the unique id
        run: echo "::set-output name=id::$(echo ${{ matrix.directory }} | sed 's_/_-_g')"
      - name: Serialize Examples
        env:
          SANDBOX: "1"
        run: |
          REGISTRY=ghcr.io/flyteorg make -C ${{ matrix.directory }} serialize
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: snacks-${{ steps.example_id.outputs.id }}
          path: ${{ matrix.directory }}/_pb_output/*

  # Download all artifacts generated from the previous job. Startup a sandbox cluster then register all of them.
  register:
    name: Register example to sandbox
    runs-on: ubuntu-latest
    needs: ["list", "serialize"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - uses: unionai/flytectl-setup-action@v0.0.1
      - name: setup download artifact dir
        run: |
          mkdir download-artifact
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./download-artifact/
      - name: setup sandbox
        run: |
          make setup
          flytectl config init
      - name: Register examples
        uses: unionai/flyte-register-action@v0.0.2
        with:
          flytesnacks: false
          proto: ./download-artifact/**/*
          project: flytesnacks
          version: "latest"
          domain: development

  # Download artifacts again and push them to the release only if this is not a pull request
  release:
    name: Release Example
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [ "list", "serialize", "register"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: setup download artifact dir
        run: |
          mkdir download-artifact
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./download-artifact/
      - name: Package Examples
        run: |
          mkdir -p cookbook/release-snacks
          cd download-artifact
          for i in */; do tar -czvf "../cookbook/release-snacks/${i%/}.tar.gz" "$i" & done; wait
          cd .. && sudo rm -rf download-artifact/
          cp cookbook/flyte_tests_manifest.json cookbook/release-snacks/flyte_tests_manifest.json
      - name: Release test manifest
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
          GORELEASER_CURRENT_TAG: ${{ inputs.tag }}

